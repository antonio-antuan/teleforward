name: Build and deploy
permissions:
  issues: write

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag'
        required: true
        default: 'latest'
      deploy:
        description: 'Deploy'
        required: false
        type: boolean
        default: true
      use_registry:
        description: 'Use registry'
        required: false
        type: boolean
        default: true

env:
  IMAGE: ${{ vars.IMAGE_NAME }}:${{ github.event.inputs.image_tag }}
  BASE_IMAGE: ${{ vars.IMAGE_NAME }}-base:latest

jobs:
#  build-with-registry:
#    if: github.event.inputs.use_registry == 'true'
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: build with registry
#        id: build_with_registry
#        uses: ./.github/actions/build-with-registry
#        with:
#          registry_username: ${{ secrets.DOCKERHUB_USERNAME }}
#          registry_password: ${{ secrets.DOCKERHUB_PASSWORD }}
#          image: ${{ env.IMAGE }}
#          base-image: ${{env.BASE_IMAGE}}
#
#  build-tar:
#    if: github.event.inputs.use_registry != 'true'
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: build tar
#        id: build_tar
#        uses: ./.github/actions/build-with-tar
#        with:
#          image: ${{ env.IMAGE }}
#          dest: image.tar
#
#      - uses: actions/upload-artifact@v3.1.3
#        with:
#          name: image-tar
#          path: image.tar

  prepare_deploy:
#    needs: [build-with-registry, build-tar]
#    if: ${{ always() && github.event.inputs.deploy == 'true' && contains(join(needs.*.result, ','), 'success') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: update yaml
        id: update_yaml
        uses: fjogeleit/yaml-update-action@v0.13.2
        with:
          commitChange: false
          # `ACCOUNTS_JSON` should be in the format of [{"phone": "+9999999999", "file_path": "/home/me/data.md", "tddb_dir": "tddb"}]
          # `TELEGRAM_JSON` should be in the format of {"api_id": 123123, "api_hash": "hash", "tdlib_log_verbosity": 1}
          changes: |
            {
              "config.yml": {
                "telegram": ${{ secrets.TELEGRAM_JSON }},
                "accounts": ${{ secrets.ACCOUNTS_JSON }}
              }
            }

      # stop before copying docker-compose.
      - name: stop service
        id: stop_service
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          # copy docker-compose from the repo
          script: |
            cd ${{ secrets.SERVER_APP_PATH }}
            [ -f docker-compose.yml ] && docker-compose stop && docker-compose rm teleforward || echo 'docker-compose.yml not found, skipping.'

      - name: copy configs
        id: copy_configs
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "config.yml,docker-compose.yml"
          target: ${{ secrets.SERVER_APP_PATH }}

  deploy_from_registry:
    needs: [prepare_deploy]
#    needs: [build-with-registry, prepare_deploy]
    if: github.event.inputs.deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: pull image
        id: pull_image
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd ${{ secrets.SERVER_APP_PATH }}
            export IMAGE=${{ env.IMAGE }}
            docker-compose pull

      - name: start
        id: start
        uses: ./.github/actions/start-app
        with:
          server-host: ${{ secrets.SERVER_HOST }}
          server-username: ${{ secrets.SERVER_USERNAME }}
          server-key: ${{ secrets.SERVER_KEY }}
          server-port: ${{ secrets.SERVER_PORT }}
#          pat: ${{ secrets.PAT }}
          image: ${{ env.IMAGE }}
          server_workdir: ${{ secrets.SERVER_APP_PATH }}

#  deploy_from_tar:
#    needs: [build-tar, prepare_deploy]
#    if: github.event.inputs.deploy == 'true'
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#
#      - uses: actions/download-artifact@v2
#        with:
#          name: image-tar
#
#      - name: copy image tar
#        id: copy_image_tar
#        uses: appleboy/scp-action@v0.1.4
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          password: ${{ secrets.SERVER_KEY }}
#          port: ${{ secrets.SERVER_PORT }}
#          source: "image.tar"
#          target: ${{ secrets.SERVER_APP_PATH }}
#
#      - name: load image from dag
#        id: load_image_from_tar
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          key: ${{ secrets.SERVER_KEY }}
#          port: ${{ secrets.SERVER_PORT }}
#          script: |
#            cd ${{ secrets.SERVER_APP_PATH }}
#            docker load -i image.tar
#            rm image.tar
#
#      - name: start
#        id: start
#        uses: ./.github/actions/start-app.yml
#        with:
#          server-host: ${{ secrets.SERVER_HOST }}
#          server-username: ${{ secrets.SERVER_USERNAME }}
#          server-key: ${{ secrets.SERVER_KEY }}
#          server-port: ${{ secrets.SERVER_PORT }}
#          pat: ${{ secrets.PAT }}
